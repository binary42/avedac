/*
 * MATLAB Compiler: 4.4 (R2006a)
 * Date: Thu Feb 15 10:00:15 2007
 * Arguments: "-B" "macro_default" "-W" "lib:libJeromeSegmentAlgorithms" "-T"
 * "link:lib" "-d" "/usr/lib/aved" "-g" "-G" "applyRectangleMask"
 * "applyRectangleImageMask" "homomorphicCanny" "adaptiveThresholding"
 * "backgroundCanny" "graphCut/extractForegroundBW"
 * "graphCut/getBackgroundMean" "readTmp" 
 */

#include <stdio.h>
#define EXPORTING_libJeromeSegmentAlgorithms 1
#include "libJeromeSegmentAlgorithms.h"
#ifdef __cplusplus
extern "C" {
#endif

extern mclComponentData __MCC_libJeromeSegmentAlgorithms_component_data;

#ifdef __cplusplus
}
#endif


static HMCRINSTANCE _mcr_inst = NULL;


static int mclDefaultPrintHandler(const char *s)
{
    return fwrite(s, sizeof(char), strlen(s), stdout);
}

static int mclDefaultErrorHandler(const char *s)
{
    int written = 0, len = 0;
    len = strlen(s);
    written = fwrite(s, sizeof(char), len, stderr);
    if (len > 0 && s[ len-1 ] != '\n')
        written += fwrite("\n", sizeof(char), 1, stderr);
    return written;
}


/* This symbol is defined in shared libraries. Define it here
 * (to nothing) in case this isn't a shared library. 
 */
#ifndef LIB_libJeromeSegmentAlgorithms_C_API 
#define LIB_libJeromeSegmentAlgorithms_C_API /* No special import/export declaration */
#endif

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV libJeromeSegmentAlgorithmsInitializeWithHandlers(
    mclOutputHandlerFcn error_handler,
    mclOutputHandlerFcn print_handler
)
{
    if (_mcr_inst != NULL)
        return true;
    if (!mclmcrInitialize())
        return false;
    if (!mclInitializeComponentInstance(&_mcr_inst,
                                        &__MCC_libJeromeSegmentAlgorithms_component_data,
                                        true, NoObjectType, LibTarget,
                                        error_handler, print_handler))
        return false;
    return true;
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV libJeromeSegmentAlgorithmsInitialize(void)
{
    return libJeromeSegmentAlgorithmsInitializeWithHandlers(mclDefaultErrorHandler,
                                                            mclDefaultPrintHandler);
}

LIB_libJeromeSegmentAlgorithms_C_API 
void MW_CALL_CONV libJeromeSegmentAlgorithmsTerminate(void)
{
    if (_mcr_inst != NULL)
        mclTerminateInstance(&_mcr_inst);
}


LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlxApplyRectangleMask(int nlhs, mxArray *plhs[],
                                        int nrhs, mxArray *prhs[])
{
    return mclFeval(_mcr_inst, "applyRectangleMask", nlhs, plhs, nrhs, prhs);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlxApplyRectangleImageMask(int nlhs, mxArray *plhs[],
                                             int nrhs, mxArray *prhs[])
{
    return mclFeval(_mcr_inst, "applyRectangleImageMask",
                    nlhs, plhs, nrhs, prhs);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlxHomomorphicCanny(int nlhs, mxArray *plhs[],
                                      int nrhs, mxArray *prhs[])
{
    return mclFeval(_mcr_inst, "homomorphicCanny", nlhs, plhs, nrhs, prhs);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlxAdaptiveThresholding(int nlhs, mxArray *plhs[],
                                          int nrhs, mxArray *prhs[])
{
    return mclFeval(_mcr_inst, "adaptiveThresholding",
                    nlhs, plhs, nrhs, prhs);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlxBackgroundCanny(int nlhs, mxArray *plhs[],
                                     int nrhs, mxArray *prhs[])
{
    return mclFeval(_mcr_inst, "backgroundCanny", nlhs, plhs, nrhs, prhs);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlxExtractForegroundBW(int nlhs, mxArray *plhs[],
                                         int nrhs, mxArray *prhs[])
{
    return mclFeval(_mcr_inst, "extractForegroundBW", nlhs, plhs, nrhs, prhs);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlxGetBackgroundMean(int nlhs, mxArray *plhs[],
                                       int nrhs, mxArray *prhs[])
{
    return mclFeval(_mcr_inst, "getBackgroundMean", nlhs, plhs, nrhs, prhs);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlxReadTmp(int nlhs, mxArray *plhs[],
                             int nrhs, mxArray *prhs[])
{
    return mclFeval(_mcr_inst, "readTmp", nlhs, plhs, nrhs, prhs);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlfApplyRectangleMask(mxArray* input_path, mxArray* x
                                        , mxArray* y, mxArray* height
                                        , mxArray* width)
{
    return mclMlfFeval(_mcr_inst, "applyRectangleMask", 0, 0,
                       5, input_path, x, y, height, width);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlfApplyRectangleImageMask(mxArray* input_path
                                             , mxArray* mask_path)
{
    return mclMlfFeval(_mcr_inst, "applyRectangleImageMask",
                       0, 0, 2, input_path, mask_path);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlfHomomorphicCanny(mxArray* input_path, mxArray* type)
{
    return mclMlfFeval(_mcr_inst, "homomorphicCanny",
                       0, 0, 2, input_path, type);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlfAdaptiveThresholding(mxArray* input_path, mxArray* type)
{
    return mclMlfFeval(_mcr_inst, "adaptiveThresholding",
                       0, 0, 2, input_path, type);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlfBackgroundCanny(mxArray* input_path, mxArray* type)
{
    return mclMlfFeval(_mcr_inst, "backgroundCanny",
                       0, 0, 2, input_path, type);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlfExtractForegroundBW(mxArray* image
                                         , mxArray* backgroundMean)
{
    return mclMlfFeval(_mcr_inst, "extractForegroundBW",
                       0, 0, 2, image, backgroundMean);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlfGetBackgroundMean(mxArray* folder, mxArray* input
                                       , mxArray* background)
{
    return mclMlfFeval(_mcr_inst, "getBackgroundMean", 0,
                       0, 3, folder, input, background);
}

LIB_libJeromeSegmentAlgorithms_C_API 
bool MW_CALL_CONV mlfReadTmp(mxArray* index)
{
    return mclMlfFeval(_mcr_inst, "readTmp", 0, 0, 1, index);
}
