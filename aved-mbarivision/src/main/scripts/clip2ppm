#!/bin/bash
#
# Name: clip2ppm
# This script converts a video clip into individual ppm frames in preparation
# for AVEDac processing.
#
# Copyright (c) MBARI 2010
# Author: D. Cline
#
# exit on error - this will exit this bash script when any command exits with
# a non-zero exit code
set -e
###################################################################################
# Print usage
print_usage()
{
  echo "  "
  echo "  "
  echo -e "USAGE:  clip2ppm [OPTIONS] -i filename.AVI|MOV|MPG -o ppm_output_directory"
  echo "  "
  echo "  "
  echo "  "
  echo "OPTION"
  echo "  "
  echo -e "\033[1m -s \033[0m"
  echo "     output ppm directory is defined relative to local machine users scratch directory"
  echo "      (Example:  clip2ppm -s -i filename.AVI -o mytest/output )"
  echo "  "
  echo -e "\033[1m -t \033[0m"
  echo "     options to pass to the transcoder - these must work with transcode binary"
  echo "      (Example:  clip2ppm -s -t '-J smartdeinter=diffmode=2:highq=1:cubic=1,xsharpen=strength=25' -i filename.AVI -o mytest/output )"
  echo "  "
  echo -e "\033[1m -b \033[0m"
  echo "     beginning frame. This is generally used with the ending frame option '-e'. For example, "
  echo "     to transcode only the first 30 frames:"
  echo "      (Example:  clip2ppm -b 0 -e 30 -i filename.AVI -o mytest/output )"
  echo "  "
  echo "     However, this can also be used without the '-e' option. In this case, the ending frame defaults to the last frame of the clip."
  echo "     For example, to transcode from the 100th frame to the end:"
  echo "      (Example:  clip2ppm -b 100 -i filename.AVI -o mytest/output )"
  echo "  "
  echo -e "\033[1m -e \033[0m"
  echo "     ending frame. This is generally used with the beginning frame option '-b'. "
  echo "     For example, to transcode only the first 30 frames: " 
  echo "      (Example:  clip2ppm -b 0 -e 30 -i filename.AVI -o mytest/output )"
  echo "  "
  echo "     However, this can also be used without the '-b' option. In this case, the beginning frame defaults to 0."
  echo "     For example, to transcode from the beginning to the 100th frame:"
  echo "      (Example:  clip2ppm -e 100 -i filename.AVI -o mytest/output )"
  echo "  "
  echo "  "
}
frame_number=0

##################################################################################
# Tests whether *entire string* is numerical.  In other words, tests for integer variable.
# returns $SUCCESS if a numerical string; $FAILURE otherwise
##################################################################################
isdigit ()    
{            
  [ $# -eq 1 ] || return $FAILURE

  case $1 in
      [!0-9]*) return $FAILURE;;
           *) return $SUCCESS;;
  esac
}
###################################################################################
# Frame number from 29.97 frame/s drop frame timecode, assume 0 frames
#
# Usage: calculate_2997dropframes hours minutes seconds
#  
#  e.g. calculate_2997dropframes 10 12 10
###################################################################################
calculate_2997dropframes()
{
    hours=$1
    minutes=$2
    seconds=$3    
    frame=0
    total_minutes=$(echo "scale=0; 60*$hours + $minutes" | bc)
    b=$(echo "scale=0; ($total_minutes - $total_minutes/10)*2" | bc)
    frame_number=$(echo "scale=0; (108000*$hours + 1800*$minutes + 30*$seconds  + $frame) - $b" | bc)
}
###################################################################################
# Frame number from timecode, assume 0 frames
#
# Usage: calculate_frames hours minutes seconds
#  
#  e.g. calculate_frames 10 12 10
###################################################################################
calculate_frames()
{
    rate=$1
    hours=$2
    minutes=$3
    seconds=$4    
    frame=0

    frame_number=$(echo "scale=0;(3600*$hours + 60*$minutes + $seconds)*$rate + $frame" | bc)
}
###################################################################################
# Determines what method to use to convert timecode to a counter based on frame rate
###################################################################################
timecode2counter()
{   
    rate=$1
    tc=$2
    hours=`echo $tc | cut -c 1-2`
    minutes=`echo $tc | cut -c 3-4`
    seconds=`echo $tc | cut -c 5-6`
    case $rate in
	29.97 )calculate_2997dropframes $hours $minutes $seconds ;;
	* ) calculate_frames $rate $hours $minutes $seconds ;;
    esac
}
###################################################################################
# Utility function to remove very long listings of files 
###################################################################################
rmall()
{
   tmp=./tmp.$RANDOM
   echo "find ./ -type f -name '$1' -exec rm {} \;" > $tmp 
   chmod u+x $tmp
   $tmp
   rm -f $tmp
}
###################################################################################
# Initialize variables
E_ERR=2
SUCCESS=0
FAILURE=-1
input=""
output=""
use_system_scratch=0
has_timecode=0
transcode_opts=""
codec=""
extra_args=
time_code=
start_frame=0
end_frame=0

# Check arguments
args=`getopt -o t:i:o:e:b:s -- "$@" `
if test $? != 0; then
    print_usage
    exit $E_ERR
fi

eval set -- "$args" 
for i
do
  case $i in   
   -i)  shift;input="$1";shift;;
   -s)  use_system_scratch=1;;
   -b)  shift;start_frame=$1;shift;;
   -e)  shift;end_frame=$1;shift;
       # Add in 1 to the ending frame, because this
       # frame will not be transcoded - this is a transcode
       # bug/feature
       ((end_frame+=1));;
   -t)  shift;transcode_opts="$1";shift;;
   -o)  shift;output="$1";shift;;
  esac
done


# If the input and output files are empty print usage and exit
if [ ! -n "$input" ] || [ !  -n "$output" ]; then
    print_usage
    exit $E_ERR
fi

# Add the path to the aved binaries if AVED_BIN is set
if [ $AVED_BIN ]; then
    PATH=$PATH:$AVED_BIN
    export PATH
fi

if [ $_CONDOR_SCRATCH_DIR ]; then
    PATH=$PATH:$_CONDOR_SCRATCH_DIR
    export PATH
fi

# Format the output directory
if [ $use_system_scratch = 1 ]; then
    if [ $SCRATCH_DIR -a $USER ]; then
	outputdir=$SCRATCH_DIR/$USER/$output
    else
	echo "Error \$SCRATCH_DIR and \$USER environment variable must be defined when using the -s option"
	exit $E_ERR
    fi
else  
    outputdir=$output
fi

# Create output directory if it doesn't exist
# If it exists and it is in scratch, then clean it first
if [ -d $outputdir -a $use_system_scratch = 1 ]; then
     # Change into output directory
    pushd $outputdir
    echo $PWD
    echo "Found $outputdir, removing previous results in directory"
    rmall "*"
    popd
else
    echo "Executing mkdir -p $outputdir"
    mkdir -p $outputdir
    chmod a+rwx -f $outputdir    
fi

# Format the absolute name of the input file
basefile=$(basename $input)
filestem=${basefile%.*} 
D=$(dirname $input)
abspath=`cd $D && pwd `

# Format the full path to the file
input=$abspath/$basefile

# Now do the work in the output directory
pushd $outputdir

# Initialize the file seed
outputfileseed=f

# Remove any previous ppm files generated
rmall "$outputfileseed*.ppm"

# Check if this file has a ISO8601 timecode timestamp and extract
# timestamp from the name. This is a crude test so far that only
# checks if there is a set of numbers appended with a T
a=`echo $filestem | grep "T" | cut -f1 -d "T"`
if isdigit $a
then
    time_code=`echo $filestem | cut -f1 -d "Z" | cut -f2 -d "T" `
    has_timecode=1
fi

# Format the transcode option for start/end frames if defined
if [ $start_frame -lt $end_frame ]; then
  transcode_opts=" -c $start_frame-$end_frame $transcode_opts "
fi

# Run transcode or scripts needed to convert to ppms
case $input in
    *.tgz | *.tar.gz )
	echo "Warning: transcode commands will be ignored because $input is not a video clip to be transcoded."
	gunzip < $input | tar xvf - ;;
    *.avi )  
    if [ $has_timecode = 1 ]; then
	rate=`tcprobe -i $input | sed '/frame rate/!d' | cut -f11 -d ' '`
	timecode2counter $rate $time_code
	extra_args="-f $rate -start_timecode $frame_number"
    fi
    tmp=`tcprobe -i $input | sed '/codec/!d' | cut -f2 -d '=' | cut -f1 -d ',' `
    codec=`echo $tmp | cut -f2 -d ":" | cut -f2 -d " "`
    case "$codec" in
	"DX50" )  	    
	cmd="transcode -q 0 -i $input -o $outputfileseed -x ffmpeg,null -y ppm,null $extra_args $transcode_opts"		     
	;;
	"mpg2" )
	cmd="transcode -q 0 -i $input -o $outputfileseed -x mpeg2,null -y ppm,null $extra_args $transcode_opts"
	;;
	* ) 	       	    	
	cmd="transcode -q 0 -i $input -o $outputfileseed -y ppm,null $extra_args $transcode_opts"
	;;
    esac
    echo "Executing $cmd"
    $cmd
    ;;
    *.mov )  
    delimx="x"
    tmp=./tmp.$RANDOM
    if which oqtinfo &>/dev/null; then
	oqtinfo -l $input > $tmp
	if [ $has_timecode = 1 ]; then  
	    # This assumes the rate is constant.
            # Get the rate from the the timecode track if it exists
	    # If the rate is not valid, then get the rate from the video track
	    if `grep "timecode track" $tmp` ; then
		r=`grep "timecode scale" $tmp | cut -f2,3 -d " " | cut -f2 -d " "`
		rate=$(echo "scale=2; $r/100" | bc)
	    else
		r=`grep "Rate:" $tmp | cut -f6 -d " "`   
		rate=$(echo "scale=2; $r" | bc)
	    fi	    
	    timecode2counter $rate $time_code	    
	    extra_args="-f $rate -start_timecode $frame_number"
	fi
    fi
    if which qtinfo &>/dev/null; then
	qtinfo $input > $tmp
	    # Search for 3-letter code, e.g. [8BPS] in the output
	codec=`grep 'compressor' $tmp | cut -d " " -f 6 | cut -d "." -f 1`;
	rm $tmp
    fi
    case "$codec" in
	"mp4v" )
	cmd="transcode -q 0 -i $input -o $outputfileseed -y ppm,null $extra_args $transcode_opts";;
	* )
		  # If the import-oqtmov.so library is found, use it in case there is a timecode track 
	if ls -1 `tcmodinfo -p`/import_oqtmov.so >/dev/null ; then 
	    cmd="transcode -q 0 -i $input -o $outputfileseed -x oqtmov,null -y ppm,null --use_rgb $extra_args $transcode_opts"
	else
	    cmd="transcode -q 0 -i $input -o $outputfileseed -V rgb24 -x mov,null -y ppm,null $extra_args $transcode_opts"
	fi;;
    esac
    echo "Executing $cmd"
    $cmd
    ;;
    *.mpeg | *.mpg )  
    cmd="transcode -q 0  -i $input -x mpeg2,null -y ppm,null -o $outputfileseed $extra_args $transcode_opts"
    echo "Executing $cmd"
    $cmd;;
    *.wmv )
    echo "Error unsupported format: wmv. Try using ffmpeg to convert to an avi first, for example" 
    echo ""
    echo "   fmpeg -i $input -r 29.97 -b 2799k -an -vtag DX50 -y $filestem.avi"
    echo ""
    echo "followed with:"
    echo ""
    echo "   clip2ppm -i $filestem.avi -o $output"
    exit $E_ERR;; 
    * ) 
    cmd="transcode -q 0 -i $input -o $outputfileseed -y ppm,null $extra_args $transcode_opts" 
    echo "Executing $cmd"
    $cmd;;
esac

popd

exit 0

