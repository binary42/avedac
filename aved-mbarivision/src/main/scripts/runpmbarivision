#!/bin/bash
#
# Name: runpmbarivision -w <worker_list> -a '<arguments to pass to pmbarivision>'
#
# This script executes the pmbarivision executable from any node in the beowulf cluster
# using the mp2script. pvisionTCPmbari workers to be used with this executable are 
# defined in the <worker_list> file
# 
# Copyright (c) MBARI 2010
# Author: D. Cline
#######################################################################################
# init default variables
E_ERR=2
E_NOPORTS=3
debug=0 #debugging flag set to 1 to debug the pmbarivision binary
worker_list=""
num_procs=5 #only need 5 nodes for the pmbarivision MPI executable
args=""
############################################################################
# Print usage
print_usage()
{
  echo "  "
  echo -e "USAGE: runpmbarivision -w workerfile  -a 'arguments to pass to pmbarivision' "
  echo "  "
  echo -e "\033[1m -w \033[0m"
  echo "      worker file containing the list of workers running pvisionTCPmbari "
  echo "      that runpmbarivision will contact to execute the saliency computation"
  echo "  "
  echo "      this file must be formatted in the format:   node:port, e.g."
  echo "  "
  echo "      master.private.net:9726,node6.private.net:9726,node7.private.net:9726,"
  echo "      node4.private.net:9726,node2.private.net:9726,node1.private.net:9726,"
  echo "      node3.private.net:9726 "
  echo "  "
  echo -e "\033[1m -a \033[0m"
  echo "      pass arguments to the pmbarivision executable. Be sure to enclose the "
  echo "      arguments in quotes." 
}
###################################################################################
# Beginning of runpmbarivision script
###################################################################################
checkexe()
{
# Find the executable 
exe="`type -p $1`" 

# If not found then we cannot use this script so bail out now
if [ ! $exe ]; then
   echo "Error: $1 not found"
   exit 1
fi

# Change permissions if not set correctly by Condor transfer 
if [ ! -x $exe ]; then
   echo "Changing $exe to executable by user"
   chmod u+x $exe
fi
}
############################################################################
# Get port number
getportnum()
{
portfile=$1
lockfile=$1\.lock
portstart=$2
portend=$3
nextavail_port=-1

for i in `seq 1 10`
  do
  if ( set -o noclobber; echo "$$" > "$lockfile" ) 2>/dev/null;
      then
      trap 'rm -f "$lockfile"; exit $?' INT TERM 
     
      nextavail_port=`cat $portfile`

      # If port is out of range, then reset it
      if test $nextavail_port -gt $portend || test $nextavail_port -lt $portstart 
	  then
	  echo "$portstart" > $portfile
	  nextavail_port=$portstart
      fi

      # Test if the port is available for use and not tied up in another mpi job
      for port in `seq $nextavail_port $portend`
	do
        # Gather information about any jobs or processes potentially using this port
	mpdjobs=`mpdlistjobs | grep $port`
	netstatlocal=`netstat | grep '$port' | grep TIME_WAIT `
	pmbarivisionjobs=`ps -eo "%p %a" | grep -e pmbarivision | grep -e $port | cut -f1 -s -d " "`  	  
	
        # If port is being used by another job report it
	if [ "$mpdjobs" != "" ]  ; then 
	    echo "Jobs still using port $port:" 
	    echo "$mpdjobs"
	    mpdlistjobs | grep $port | egrep -v pmbarivision
	    
        # If port is being used by a local process report it
	elif [ "$netstatlocal" != "" -o "" != "$pmbarivisionjobs" ] ; then
	    echo "workers still busy on $port" 
	    echo "$netstatlocal"
	    echo "Process still running: $$pmbarivisionjobs"     
	    
        # Otherwise, assume this port is available
	else       
	    echo "Port $port available"
	    nextavail_port=$port
        # Increment and write the next available port
	    ((port += 1))
	    echo "$port" > $portfile  
	    break
	fi
      done
      
      rm -f "$lockfile"
      trap - INT TERM EXIT
      break
  else
      echo "Failed to acquire lockfile: $lockfile."
      echo "Held by `cat $lockfile`. Sleeping 3 seconds before retrying."
      sleep 3
  fi
done
}
############################################################################
# Setup MPI environment variables
if [ $MPDIR ]; then
  export PATH=$MPDIR/bin:.:$PATH
else
  MPDIR=/opt/mpich2-1.1p1/bin
  export PATH=$MPDIR:.:$PATH
fi

# Define the machine file. Change this to point to the MPICH installation 
# directory on your machine
host_file=$MPDIR/etc/mpd.hosts 
machine_file=`pwd`/pmbarivisionmachines

if [ ! -f $host_file ]; then
    echo "File \"$host_file\" does not exist"
    exit $E_ERR
fi

# Get the first $num_proces and put into  the machine file 
head -n $num_procs $host_file > $machine_file

# Check arguments
while getopts w:a: option 
do
  case $option in   
   w)  worker_list="$OPTARG";;
   a)  args="$OPTARG";;
   *) ;;
  esac
done

# If the worker list is missing then print usage and exit
if [ ! -n "$worker_list"  ]; then
    print_usage
    exit $E_ERR
fi

# Define the MPI executable
if [ ! $AVED_BIN ]; then
    echo "Error - AVED_BIN environment variable not defined"
    exit $E_ERR
else
    exec_file=$AVED_BIN/pmbarivision
fi

# Define the MPI setup file 
mpisetup=/etc/aved/pmbarivision.mpi
if [ ! -f $mpisetup ]; then
    echo "File \"$mpisetup\" does not exist"
    exit $E_ERR
fi

if [ ! $SCRATCH_DIR ]; then
    echo "Error - SCRATCH_DIR environment variable not defined"
    exit $E_ERR
fi

# Make sure runpvisionworkers is executable
checkexe runpvisionworkers

# Start up the pvision workers
echo "Running runpvisionworkers -w "$worker_list""
runpvisionworkers -w "$worker_list" & 
pvis_pid=$!
trap 'kill -9 $pvis_pid; exit $?' INT TERM EXIT
echo "Sleeping 3 seconds waiting for workers to start"
sleep 3
pvisport=""

# Check if the pvision workers are running 
# retry 3 times, and wait 5 seconds between retries in case the workers
# are not running yet
for i in `seq 1 3`
  do
  
  if [ ! -e "$worker_list" ]; then
	if [ "$i" = 3 ]; then
    	  echo "Error - cannot find $worker_list - this probably means the workers have failed"
    	  exit $E_ERR
    	  break
	fi
  else 
    workerlist=`cat $worker_list`
    pvisport=`cat $worker_list | cut -f2 -d ":" | cut -f1 -d ","`
    echo "Looking for pvisionTCPmbari workers on port $pvisport" 
# Check if the mpi job is running by looking up the job alias
  tmp=`mpdlistjobs | grep pvisionTCPmbari$pvisport`
  if [ "$tmp" ]; then
     echo "Found pvisionTCPmbari workers on port $pvisport"
     break
  elif [ "$tmp" = "" -a "$i" = 3 ]; then
     echo "Error - pvisionTCPmbari on $pvisport not running !!!"
     exit $E_ERR
  fi
fi
      echo "Retry $i after sleeping 5 seconds"
      sleep 5  
done

portstart=`cat $mpisetup | grep "PMBARIVISION_PORT_START=" | cut -f2 -d "="`
portend=`cat $mpisetup | grep "PMBARIVISION_PORT_END=" | cut -f2 -d "="`

# Define the port file that maintains the last used port
# This file must be on a shared file system across all nodes
# in the cluster that anyone can write to
# Change this for your environment as needed. 
# This must match the defined file in runpvisionworkers
portfile=$SCRATCH_DIR/pmbarivision.port

# If the port file has not been created - create it and reset it
if [ ! -e $portfile ]; then    
    echo "$portstart" > $portfile
    # Make sure anyone can write to this file
    chmod a+rwx $portfile
fi

# Get the next available port
getportnum $portfile $portstart $portend
   
if [ $nextavail_port -eq -1 ]; then
    echo "Error - no ports available for processing.  Please try again in a few minutes"
    exit $E_NOPORTS
fi
 
# Append arguments for beowulf workers and disable floating point exceptions to 
# make this version more tolerant to exceptions
args="$args --ip-port=$nextavail_port --beowulf-slaves=$workerlist --use-fpe=false"
      
# Make sure mp2script is executable
checkexe mp2script

# Format and run command
# If not running in debugger, then just run
if [ $debug = 0 ]; then
    echo "Running mp2script -h $machine_file -a pmbarivision$USER$nextavail_port -n $num_procs -e $exec_file -g "$args""
    mp2script -h $machine_file -a pmbarivision$USER$nextavail_port -n $num_procs -e $exec_file -g "$args"
else
    echo "Running mp2script -h $machine_file -a pmbarivision$USER$nextavail_port -n $num_procs -e $exec_file -g "$args""
    mp2script -d -h $machine_file -a pmbarivision$USER$nextavail_port -n $num_procs -e $exec_file -g "$args"
fi 

rc=$?
trap - INT TERM EXIT

# Kill pvisionTCPmbari workers in case they are still running 
echo "Running  mpdkilljob -a pvisionTCPmbari$pvisport"
mpdkilljob -a pvisionTCPmbari$pvisport 

echo "----------------------->runpmbarivision done - exit code: $? !!<-------------------"
exit $rc

