/*               -*- mode: c++ -*-

   DO NOT EDIT THIS FILE -- CHANGES WILL BE LOST!

   [Mon Nov 08 13:31:24 PST 2010] This file was automatically generated by
   applying the script "./devscripts/extract_templates.tcl" to the template
   declarations in source file "src/Image/FilterOps.H" for types [byte,
   float]
*/
#ifndef INST_CLASS
#  define INST_CLASS
#endif
#ifdef INST_NAMESPACE
namespace INST_NAMESPACE {
#endif
template Image< promote_trait<byte, float>::TP> INST_CLASS correlation(const Image<byte>& src, const Image<float>& filter);
template Image< promote_trait<float, float>::TP> INST_CLASS correlation(const Image<float>& src, const Image<float>& filter);
template Image< promote_trait<byte, float>::TP> INST_CLASS templMatch(const Image<byte>& src, const Image<float>& filter, int method );
template Image< promote_trait<float, float>::TP> INST_CLASS templMatch(const Image<float>& src, const Image<float>& filter, int method );
template Image< promote_trait<byte, float>::TP> INST_CLASS spatialPoolMax(const Image<byte>& src, const int si, const int sj, const int sti, const int stj);
template Image< promote_trait<float, float>::TP> INST_CLASS spatialPoolMax(const Image<float>& src, const int si, const int sj, const int sti, const int stj);
template float INST_CLASS featurePoolHmax(const Image<byte>& img1, const Image<byte>& img2, const Image<byte>& img3, const Image<byte>& img4, const int si, const int sj, const float s2t);
template float INST_CLASS featurePoolHmax(const Image<float>& img1, const Image<float>& img2, const Image<float>& img3, const Image<float>& img4, const int si, const int sj, const float s2t);
template Image< promote_trait<byte, float>::TP> INST_CLASS orientedFilter(const Image<byte>& src, const float k, const float theta, const float intensity , const bool usetab );
template Image< promote_trait< PixRGB<byte> , float>::TP> INST_CLASS orientedFilter(const Image< PixRGB<byte> >& src, const float k, const float theta, const float intensity , const bool usetab );
template Image< promote_trait<float, float>::TP> INST_CLASS orientedFilter(const Image<float>& src, const float k, const float theta, const float intensity , const bool usetab );
template Image< promote_trait< PixRGB<float> , float>::TP> INST_CLASS orientedFilter(const Image< PixRGB<float> >& src, const float k, const float theta, const float intensity , const bool usetab );
template Image<byte> INST_CLASS centerSurround(const Image<byte>& center, const Image<byte>& surround, const bool absol );
template Image<float> INST_CLASS centerSurround(const Image<float>& center, const Image<float>& surround, const bool absol );
template void INST_CLASS centerSurround(const Image<byte>& center, const Image<byte>& surround, Image<byte>& pos, Image<byte>& neg);
template void INST_CLASS centerSurround(const Image<float>& center, const Image<float>& surround, Image<float>& pos, Image<float>& neg);
template Image< promote_trait<byte, float>::TP> INST_CLASS doubleOpp(const Image<byte>& cplus, const Image<byte>& cminus, const Image<byte>& splus, const Image<byte>& sminus);
template Image< promote_trait<float, float>::TP> INST_CLASS doubleOpp(const Image<float>& cplus, const Image<float>& cminus, const Image<float>& splus, const Image<float>& sminus);
template void INST_CLASS avgOrient(const Image<byte>& src, Image<float>& orient, Image<float>& strength);
template void INST_CLASS avgOrient(const Image<float>& src, Image<float>& orient, Image<float>& strength);
template Image<byte> INST_CLASS energyNorm(const Image<byte>& img);
template Image<float> INST_CLASS energyNorm(const Image<float>& img);
template Image<byte> INST_CLASS junctionFilterFull(const Image<byte>& i0, const Image<byte>& i45, const Image<byte>& i90, const Image<byte>& i135, const bool r[8], const int dx , const int dy );
template Image<float> INST_CLASS junctionFilterFull(const Image<float>& i0, const Image<float>& i45, const Image<float>& i90, const Image<float>& i135, const bool r[8], const int dx , const int dy );
template Image<byte> INST_CLASS junctionFilterPartial(const Image<byte>& i0, const Image<byte>& i45, const Image<byte>& i90, const Image<byte>& i135, const bool r[8], const int dx , const int dy );
template Image<float> INST_CLASS junctionFilterPartial(const Image<float>& i0, const Image<float>& i45, const Image<float>& i90, const Image<float>& i135, const bool r[8], const int dx , const int dy );
template Image< promote_trait<byte, float>::TP> INST_CLASS gradientmag(const Image<byte>& input);
template Image< promote_trait<float, float>::TP> INST_CLASS gradientmag(const Image<float>& input);
template Image< promote_trait<byte, float>::TP> INST_CLASS gradientori(const Image<byte>& input);
template Image< promote_trait<float, float>::TP> INST_CLASS gradientori(const Image<float>& input);
template void INST_CLASS gradient(const Image<byte>& input, Image< promote_trait<byte, float>::TP>& mag, Image< promote_trait<byte, float>::TP>& ori);
template void INST_CLASS gradient(const Image<float>& input, Image< promote_trait<float, float>::TP>& mag, Image< promote_trait<float, float>::TP>& ori);
template void INST_CLASS gradientSobel(const Image<byte>& input, Image< promote_trait<byte, float>::TP>& mag, Image< promote_trait<byte, float>::TP>& ori, int kernelSize );
template void INST_CLASS gradientSobel(const Image<float>& input, Image< promote_trait<float, float>::TP>& mag, Image< promote_trait<float, float>::TP>& ori, int kernelSize );
template Image<byte> INST_CLASS shuffleImage(const Image<byte> &img);
template Image< PixRGB<byte> > INST_CLASS shuffleImage(const Image< PixRGB<byte> > &img);
template Image<float> INST_CLASS shuffleImage(const Image<float> &img);
template Image< PixRGB<float> > INST_CLASS shuffleImage(const Image< PixRGB<float> > &img);
#ifdef INST_NAMESPACE
}
#endif
