#!/bin/bash
# set -x
# Name: runpmbarivision -w <worker_list>
#
# This script executes the pmbarivision executable from any node in the beowulf cluster
# using the mp2script. Workers to be used with this executable are defined in the
# <worker_list> file
#
# Copyright (c) MBARI 2007
# Author: D. Cline
# Date: November 28, 2007
#######################################################################################
#exit on error; this will exit this bash script when any command exists with
#a non-zero exit code
#set -e
#######################################################################################
# init default variables
E_NOFILE=66
debug=0 #debugging flag set to 1 to debug the pmbarivision binary
worker_list=0
num_procs=5 #only need 5 nodes for the pmbarivision MPI executable
args=0
############################################################################
# Print usage
print_usage()
{
  echo "  "
  echo -e "USAGE: runpmbarivision -w [worker output list -a "arguments to pass to pmbarivision" ]"
  echo "  "
}
############################################################################
# Get port number
getportnum()
{
portfile=$1
lockfile=$1\.lock
portstart=$2
portend=$3
nextavail_port=-1

for i in `seq 1 10`
  do
  if ( set -o noclobber; echo "$$" > "$lockfile" ) 2>/dev/null;
      then
      trap 'rm -f "$lockfile"; exit $?' INT TERM EXIT
     
      nextavail_port=`cat $portfile`

      # If port is out of range, then reset it
      if test $nextavail_port -gt $portend || test $nextavail_port -lt $portstart 
	  then
	  echo "$portstart" > $portfile
	  nextavail_port=$portstart
      fi

      # Test if the port is available for use and not tied up in another mpi job
      for port in `seq $nextavail_port $portend`
	do
        # Gather information about any jobs or processes potentially using this port
	mpdjobs=`mpdlistjobs | grep $port`
	netstatlocal=`netstat | grep '$port' | grep TIME_WAIT `
	pmbarivisionjobs=`ps -eo "%p %a" | grep -e pmbarivision | grep -e $port | cut -f1 -s -d " "`  	  
	
        # If port is being used by another job report it
	if [ "$mpdjobs" != "" ]  ; then 
	    echo "Jobs still using port $port:" 
	    echo "$mpdjobs"
	    mpdlistjobs | grep $port | egrep -v pmbarivision
	    
        # If port is being used by a local process report it
	elif [ "$netstatlocal" != "" -o "" != "$pmbarivisionjobs" ] ; then
	    echo "workers still busy on $port" 
	    echo "$netstatlocal"
	    echo "Process still running: $$pmbarivisionjobs"     
	    
        # Otherwise, assume this port is available
	else       
	    echo "Port $port available"
	    nextavail_port=$port
        # Increment and write the next available port
	    ((port += 1))
	    echo "$port" > $portfile  
	    break
	fi
      done
      
      rm -f "$lockfile"
      trap - INT TERM EXIT
      break
  else
      echo "Failed to acquire lockfile: $lockfile."
      echo "Held by `cat $lockfile`. Sleeping 3 seconds before retrying."
      sleep 3
  fi
done
}
############################################################################
# Setup MPI environment variables
MPDIR=/opt/mpich2-1.1p1/bin
export PATH=$MPDIR:.:$PATH

# Define the machine file. Change this to point to the MPICH installation 
# directory on your machine
MPDIR=/opt/mpich2-1.1p1
host_file=$MPDIR/etc/mpd.hosts 
machine_file=`pwd`/pmbarivisionmachines

if [ ! -f $host_file ]; then
    echo "File \"$host_file\" does not exist"
    exit $E_NOFILE
fi

# Only need 5 of the nodes for this 
head -n $num_procs $host_file > $machine_file

# Check arguments
while getopts w:a: option 
do
  case $option in   
   w)  worker_list="$OPTARG";;
   a)  args="$OPTARG";;
   *) ;;
  esac
done

shift $((OPTIND-1))

if [ [ $worker_list = 0  ] || [ $args = 0 ] ]
then print_usage
exit 1
fi

# Defines the pvision workers - these are the workers that compute saliency
# retry 10 times, and wait 3 second between retries in case the workers
# are not running yet
for i in `seq 1 10`
  do
  if [ ! -f $worker_list ]; then
      echo "File \"$worker_list\" does not exist"
      if [ "$i" = 4 ]; then 
	  exit $E_NOFILE
      fi
  else
      # Check if the mpi process is running
      workerlist=`cat $worker_list`
      pvisport=`cat $worker_list | cut -f2 -d ":" | cut -f1 -d ","`
      tmp=`mpdlistjobs | grep pvisionTCPmbari$pvisport`
      if [ "$tmp" == "" -a "$i" = 4 ]; then
	  echo "Error - pvisionTCPmbari on $pvisport not running !!!"
	  exit $E_NOFILE
      else
	  break
      fi
  fi
  echo "Sleeping 3 seconds"
  sleep 3
done

echo "Found $worker_list"

# Define the MPI executable
if [ $AVED_BIN ]; then
    exec_file=$AVED_BIN/pmbarivision
else
    echo "Error - "$AVED_BIN" environment variable not defined"
    exit 1
fi

if [ ! $SCRATCH_DIR ]; then
    echo "Error - "$SCRATCH_DIR" environment variable not defined"
    exit 1
fi

# Define the MPI setup file and extract the port ranges for the pvisionmachine
mpisetup=/etc/aved/pmbarivision.mpi
if [ ! -f $mpisetup ]; then
    echo "File \"$mpisetup\" does not exist"
    exit $E_NOFILE
fi

portstart=`cat $mpisetup | grep "PMBARIVISION_PORT_START=" | cut -f2 -d "="`
portend=`cat $mpisetup | grep "PMBARIVISION_PORT_END=" | cut -f2 -d "="`

# Define the port file that maintains the last used port
# This file must be on a shared file system across all nodes
# in the cluster that anyone can write to
# Change this for your environment as needed. 
# This must match the defined file in runpvisionworkers
portfile=$SCRATCH_DIR/pmbarivision.port

# If the port file has not been created - create it and reset it
if [ ! -e $portfile ]; then    
    echo "$portstart" > $portfile
    # Make sure anyone can write to this file
    chmod a+rwx $portfile
fi

getportnum $portfile $portstart $portend
   
if [ $nextavail_port -eq -1 ]; then
    echo "Error - no ports available for processing.  Please try again in a few minutes"
    exit 1
fi
 
# Append arguments for beowulf workers and disable floating point exceptions to 
# make this version more tolerant to exceptions
args="$args --ip-port=$nextavail_port --beowulf-slaves=$workerlist --use-fpe=false $@"
      
# Make sure mp2script is executable
if [ ! -x mp2script ]; then
    chmod u+x mp2script
fi

# Format and run command
# If not running in debugger, then just run
if [ $debug = 0 ]; then
    echo "Running mp2script -h $machine_file -a pmbarivision$USER$nextavail_port -n $num_procs -e $exec_file -g "$args""
    mp2script -h $machine_file -a pmbarivision$USER$nextavail_port -n $num_procs -e $exec_file -g "$args"
else
    echo "Running mp2script -h $machine_file -a pmbarivision$USER$nextavail_port -n 5 -e $exec_file -g "$args""
    mp2script -d -h $machine_file -a pmbarivision$USER$nextavail_port -n $num_procs -e $exec_file -g "$args" 
fi 

# Kill pvisionworkers to free them up for someone else to use
echo "Running  mpdkilljob -a pvisionTCPmbari$pvisport"
mpdkilljob -a pvisionTCPmbari$pvisport 	
rm -f $worker_list

echo "----------------------->runpmbarivision done - exit code: $? !!<-------------------"
exit $?

