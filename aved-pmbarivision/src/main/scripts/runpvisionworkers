#!/bin/bash
# set -x
# Name: runpvisionworkers -w <worker_list>
#
# This script executes the mp2script to launch the pvisionTCPmbari workers
# It looks for the first port not being used by other pvisionTCPmbari 
# executables, launches pvision workers on that available port, and
# output the workers used to the argument <worker_list>. Note
# that the <worker_list> must be defined on a shared file
# systerm on the Beowulf cluster, such as /mnt/scratch.
# 
# This is intended to be used in conjunction with the runpmbarivision
# script. Pass the same <worker_list> to the runpmbarivision 
# <worker_list> executable
# 
# Copyright (c) MBARI 2007
# Author: D. Cline
# Date: July 09, 2007
############################################################################
# Init default variables
E_NOFILE=66
SUCCESS=0
FAILURE=-1
debug=0 #debugging flag set to 1 to debug the pvisionTCPmbari binary
worker_list=
randomize_perl_script=randomize.pl
num_pvis_workers=7
port=-1
############################################################################
# Print usage
print_usage()
{
  echo "  "
  echo -e "USAGE: runpvisionworkers -w [worker output list]"
  echo "  "
}
############################################################################
# Get port number
getportnum()
{
portfile=$1
lockfile=$1\.lock
portstart=$2
portend=$3
nextavail_port=-1

for i in `seq 1 10`
  do
  if ( set -o noclobber; echo "$$" > "$lockfile" ) 2>/dev/null;
      then
      trap 'rm -f "$lockfile"; exit $?' INT TERM EXIT
     
      nextavail_port=`cat $portfile`

      # If port is out of range, then reset it
      if test $nextavail_port -gt $portend || test $nextavail_port -lt $portstart 
	  then
	  echo "$portstart" > $portfile
	  nextavail_port=$portstart
      fi

      # Test if the port is available for use and not tied up in another mpi job
      for port in `seq $nextavail_port $portend`
	do
        # Gather information about any jobs or processes potentially using this port
	mpdjobs=`mpdlistjobs | grep $port`
	netstatlocal=`netstat | grep '$port' | grep TIME_WAIT `
	pvisionjobs=`ps -eo "%p %a" | grep -e pvisionTCPmbari | grep -e $port | cut -f1 -s -d " "`  	  
	
        # If port is being used by another job report it
	if [ "$mpdjobs" != "" ]  ; then 
	    echo "Jobs still using port $port:" 
	    echo "$mpdjobs"
	    echo "To release these ports kill these jobs with mpdkilljob -a pvisionTCPmbari$port"
	    mpdlistjobs | grep $port | egrep -v pvisionTCPmbari
	    
        # If port is being used by a local process report it
	elif [ "$netstatlocal" != "" -o "$pvisionjobs" != "" ] ; then
	    echo "workers still busy on $port" 
	    echo "$netstatlocal"
	    echo "Process still running: $pvisionjobs"  
	else
	    echo "Port $port available"
	    nextavail_port=$port
        # Increment and write the next available port
	    ((port += 1))
	    echo "$port" > $portfile  
	    break
	fi
      done

      rm -f "$lockfile"
      trap - INT TERM EXIT
      break
  else
      echo "Failed to acquire lockfile: $lockfile."
      echo "Held by `cat $lockfile`. Sleeping 3 seconds before retrying."
      sleep 3
  fi
done
}
############################################################################
isdigit ()    # Tests whether *entire string* is numerical.
{             # In other words, tests for integer variable.
  [ $# -eq 1 ] || return $FAILURE

  case $1 in
      [!0-9]*) return $FAILURE;;
           *) return $SUCCESS;;
  esac
}
############################################################################
# Check arguments
while getopts w: option 
do
  case $option in   
   w)  worker_list="$OPTARG"
	break;;
  esac
done

shift $((OPTIND-1))

if [ "x$worker_list" = x  ]; then 
print_usage
exit 1
fi

# Setup MPI 
MPDIR=/opt/mpich2-1.1p1/bin
export PATH=$MPDIR:.:$PATH

if [ $_CONDOR_SCRATCH_DIR ]; then
    export PATH=$_CONDOR_SCRATCH_DIR:$PATH
fi

# Define the pvisionTCP executable
if [ $AVED_BIN ]; then
    exec_file=$AVED_BIN/pvisionTCPmbari
else
    echo "Error - "\$AVED_BIN" environment variable not defined. Define this to the location that the mbarivision/pmbarivision executables reside in."
    exit 1
fi

# Define the machine file. Change this to point to the MPICH installation 
# directory on your machine
MPDIR=/opt/mpich2-1.1p1
machine_file=$MPDIR/etc/mpd.hosts 

if [ ! -f $machine_file ]; then
    echo "File \"$machine_file\" does not exist"
    exit $E_NOFILE
fi

echo "----MPI machines available------------"
sort -n +0 < $machine_file | awk '{print $1}' 

# Define the mpi setup file that contains the port ranges
mpisetup=/etc/aved/pmbarivision.mpi
if [ ! -f $mpisetup ]; then
    echo "File \"$mpisetup\" does not exist"
    exit $E_NOFILE
fi

# Extract the port ranges for the workers and check if they are valid digits
portstart=`cat $mpisetup | grep "PVISIONWORKER_PORT_START=" | cut -f2 -d "="`
portend=`cat $mpisetup | grep "PVISIONWORKER_PORT_END=" | cut -f2 -d "="`

if ! isdigit "$portstart" || !  isdigit "$portend" ; then
    echo "Invalid ports defined: $portstart $portend correct this in the file: $mpisetup "
    exit 2
fi

# Define the port file that maintains the last used port
# This file must be on a shared file system that all vision
# workers have access to. This must match the port file
# defined in runpmbarivision
portfile=$SCRATCH_DIR/pvisionworkers.port

# If the port file has not been created - create it and reset it
if [ ! -e $portfile ]; then   
    echo "Creating port file $portfile" 
    echo "$portstart" > $portfile
    # Make sure anyone can write to this file
    chmod a+rwx $portfile
fi

# Get the last used port and increment it
getportnum $portfile $portstart $portend
   
if [ $nextavail_port -eq -1 ]; then
    echo "Error - all workers busy. No vision workers available for processing.  Please try again in a few minutes"
    exit 1
fi

# Export the contact file for CONDOR to use
CONDOR_CONTACT_FILE="`pwd`"\/pvisionworkermachines

if [ ! -x $randomize_perl_script ]; then
    echo "Changing permissions on $randomize_perl_script"
    chmod u+x $randomize_perl_script
fi
 
# Remove the first line of the machine file listing and preserve this from the randomize
# *IMPORTANT* THIS ASSUMES THE FIRST LINE IN YOUR mpd.hosts file is the master node in your 
# Beowulf cluster from where this script will be run
sed '1d' $machine_file > mpd.conf

# Randomly output the machine file to distribute workers randomly to avoid 
# heavy loading on particular machines because some workers do more work than others
perl -S $randomize_perl_script mpd.conf > mpd.conf.tmp  

# Reinsert the first line which should be the  master node
a=`head -n 1 $machine_file`
sed -i '1i\'$a'' mpd.conf.tmp

# Add an extra line to work with sed in next format.
# This allows the last item in the list to parse out correctly 
# in the next sed function that appends the port number to each host
head -n $num_pvis_workers mpd.conf.tmp > $CONDOR_CONTACT_FILE
echo "" >> $CONDOR_CONTACT_FILE
rm mpd.conf.tmp mpd.conf

# Append :port to each host in the machine file
workers=`sed -e:a -e'$!N;s/\n/:'$nextavail_port,/';ta' -e 'P;D' $CONDOR_CONTACT_FILE `
  
# Now remove the emtpy line
sed -i '/^$/d' $CONDOR_CONTACT_FILE

# Strip off the last comma (,) and put the worker list in a file
list=${workers/%$nextavail_port,/$nextavail_port}  
echo $list  > $worker_list      
  
# Make sure the mp2script is executable
if [ ! -x mp2script ]; then
   chmod u+x mp2script
fi
 
# If not running in debugger, then just run
if [ $debug = 0 ]; then
    echo "Running mp2script -a pvisionTCPmbari$nextavail_port -h $CONDOR_CONTACT_FILE  -e $exec_file -n $num_pvis_workers -c -g "--logverb=Error --ip-port=$nextavail_port" "
    mp2script -a pvisionTCPmbari$nextavail_port -h $CONDOR_CONTACT_FILE  -n $num_pvis_workers -e $exec_file -c -g "--logverb=Error --ip-port=$nextavail_port"
else
    echo "Running mp2script -d -a pvisionTCPmbari$nextavail_port -h $CONDOR_CONTACT_FILE  -e $exec_file -n num_pvis_workers -c -g "--ip-port=$nextavail_port" "
    mp2script -d -a pvisionTCPmbari$nextavail_port -h $CONDOR_CONTACT_FILE -n $num_pvis_workers -e $exec_file -c -g "--ip-port=$nextavail_port"
fi
rc=$?
rm -f $worker_list

echo "----------------->runpvisionworker done - return code $rc !!<--------------------------"
exit $rc
  
